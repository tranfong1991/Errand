{
  "name": "mongoose-paginate",
  "description": "Pagination plugin for Mongoose",
  "version": "5.0.0",
  "author": {
    "name": "Edward Hotchkiss",
    "email": "edward@edwardhotchkiss.com"
  },
  "contributors": [
    {
      "name": "Edward Hotchkiss",
      "email": "edward@edwardhotchkiss.com"
    },
    {
      "name": "Nick Baugh",
      "email": "niftylettuce@gmail.com"
    },
    {
      "name": "Dmitry Kirilyuk",
      "email": "gk.joker@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/edwardhotchkiss/mongoose-paginate.git"
  },
  "license": "MIT",
  "keywords": [
    "mongoose",
    "paginate",
    "pagination",
    "paging",
    "page"
  ],
  "engines": {
    "node": ">=4.0.0"
  },
  "dependencies": {
    "bluebird": "3.0.5"
  },
  "devDependencies": {
    "mongoose": "4.2.8",
    "mocha": "2.3.4",
    "chai": "3.4.1",
    "chai-as-promised": "5.1.0"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha tests/*.js --timeout 5000"
  },
  "readme": "# mongoose-paginate\n\nPagination plugin for [Mongoose](http://mongoosejs.com)\n\n[![NPM version](https://img.shields.io/npm/v/mongoose-paginate.svg)](https://npmjs.org/package/mongoose-paginate)\n[![Build status](https://img.shields.io/travis/edwardhotchkiss/mongoose-paginate.svg)](https://travis-ci.org/edwardhotchkiss/mongoose-paginate)\n\n**Note:** This plugin will only work with Node.js >= 4.0 and Mongoose >= 4.0.\n\n## Installation\n\n```sh\nnpm install mongoose-paginate\n```\n\n## Usage\n\nAdd plugin to a schema and then use model `paginate` method:\n\n```js\nvar mongoose         = require('mongoose');\nvar mongoosePaginate = require('mongoose-paginate');\n\nvar schema = new mongoose.Schema({ /* schema definition */ });\nschema.plugin(mongoosePaginate);\n\nvar Model = mongoose.model('Model',  schema); // Model.paginate()\n```\n\n### Model.paginate([query], [options], [callback])\n\nReturns promise\n\n**Parameters**\n\n* `[query]` {Object} - Query criteria. [Documentation](https://docs.mongodb.org/manual/tutorial/query-documents)\n* `[options]` {Object}\n  - `[select]` {Object | String} - Fields to return (by default returns all fields). [Documentation](http://mongoosejs.com/docs/api.html#query_Query-select) \n  - `[sort]` {Object | String} - Sort order. [Documentation](http://mongoosejs.com/docs/api.html#query_Query-sort) \n  - `[populate]` {Array | Object | String} - Paths which should be populated with other documents. [Documentation](http://mongoosejs.com/docs/api.html#query_Query-populate)\n  - `[lean=false]` {Boolean} - Should return plain javascript objects instead of Mongoose documents?  [Documentation](http://mongoosejs.com/docs/api.html#query_Query-lean)\n  - `[leanWithId=true]` {Boolean} - If `lean` and `leanWithId` are `true`, adds `id` field with string representation of `_id` to every document\n  - `[offset=0]` {Number} - Use `offset` or `page` to set skip position\n  - `[page=1]` {Number}\n  - `[limit=10]` {Number}\n* `[callback(err, result)]` - If specified the callback is called once pagination results are retrieved or when an error has occurred\n\n**Return value**\n\nPromise fulfilled with object having properties:\n* `docs` {Array} - Array of documents\n* `total` {Number} - Total number of documents in collection that match a query\n* `limit` {Number} - Limit that was used\n* `[page]` {Number} - Only if specified or default `page`/`offset` values were used \n* `[pages]` {Number} - Only if `page` specified or default `page`/`offset` values were used \n* `[offset]` {Number} - Only if specified or default `page`/`offset` values were used\n\n### Examples\n\n#### Skip 20 documents and return 10 documents\n\n```js\nModel.paginate({}, { page: 3, limit: 10 }, function(err, result) {\n    // result.docs\n    // result.total\n    // result.limit - 10\n    // result.page - 3\n    // result.pages\n});\n```\n\nOr you can do the same with `offset` and `limit`:\n```js\nModel.paginate({}, { offset: 20, limit: 10 }, function(err, result) {\n    // result.docs\n    // result.total\n    // result.limit - 10\n    // result.offset - 20\n});\n```\n\nWith promise:\n```js\nModel.paginate({}, { offset: 20, limit: 10 }).then(function(result) {\n    // ...\n});\n```\n\n#### More advanced example\n\n```js\nvar query   = {};\nvar options = {\n    select:   'title date author',\n    sort:     { date: -1 },\n    populate: 'author',\n    lean:     true,\n    offset:   20, \n    limit:    10\n};\n\nBook.paginate(query, options).then(function(result) {\n    // ...\n});\n```\n\n#### Zero limit\n\nYou can use `limit=0` to get only metadata:\n\n```js\nModel.paginate({}, { offset: 100, limit: 0 }).then(function(result) {\n    // result.docs - empty array\n    // result.total\n    // result.limit - 0\n    // result.offset - 100\n});\n```\n\n#### Set custom default options for all queries\n\nconfig.js:\n```js\nvar mongoosePaginate = require('mongoose-paginate');\n\nmongoosePaginate.paginate.options = { \n    lean:  true,\n    limit: 20\n};\n```\n\ncontroller.js:\n```js\nModel.paginate().then(function(result) {\n    // result.docs - array of plain javascript objects\n    // result.limit - 20\n});\n```\n\n## Tests\n\n```sh\nnpm install\nnpm test\n```\n\n## License\n\n[MIT](LICENSE)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/edwardhotchkiss/mongoose-paginate/issues"
  },
  "_id": "mongoose-paginate@5.0.0",
  "_from": "mongoose-paginate@"
}
